--[[

This is vecsor ui library

Developer:
Teddy#1431

Helpers:
garrett#6017
SquidSaysNo#9071

Have Fun!!

]]

local lib = {}

function lib:CreateWindow(name)

if name == "" or nil then return end

local Vecsor = Instance.new("ScreenGui")
local Main = Instance.new("Frame")
local SideBar = Instance.new("Frame")
local Title = Instance.new("TextLabel")
local GameName = Instance.new("TextLabel")
local TabButtons = Instance.new("ScrollingFrame")
local UIListLayout = Instance.new("UIListLayout")
local Tabs = Instance.new("Frame")

Vecsor.Name = "Vecsor"
Vecsor.Parent = game.CoreGui
Vecsor.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Main.Name = "Main"
Main.Parent = Vecsor
Main.AnchorPoint = Vector2.new(0.5, 0.5)
Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Main.BorderSizePixel = 0
Main.Position = UDim2.new(0.5, 0, 0.5, 0)
Main.Size = UDim2.new(0, 600, 0, 350)

SideBar.Name = "SideBar"
SideBar.Parent = Main
SideBar.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
SideBar.BorderSizePixel = 0
SideBar.Size = UDim2.new(0, 172, 0, 350)

Title.Name = "Title"
Title.Parent = SideBar
Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Title.BackgroundTransparency = 1.000
Title.BorderSizePixel = 0
Title.Size = UDim2.new(0, 172, 0, 50)
Title.Font = Enum.Font.SourceSans
Title.Text = name
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextScaled = true
Title.TextSize = 14.000
Title.TextWrapped = true

GameName.Name = "GameName"
GameName.Parent = SideBar
GameName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
GameName.BackgroundTransparency = 1.000
GameName.BorderSizePixel = 0
GameName.Position = UDim2.new(0.133720934, 0, 0.142857149, 0)
GameName.Size = UDim2.new(0, 126, 0, 37)
GameName.Font = Enum.Font.SourceSans
GameName.Text = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
GameName.TextColor3 = Color3.fromRGB(108, 108, 108)
GameName.TextScaled = true
GameName.TextSize = 14.000
GameName.TextWrapped = true

TabButtons.Name = "TabButtons"
TabButtons.Parent = SideBar
TabButtons.Active = true
TabButtons.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TabButtons.BackgroundTransparency = 1.000
TabButtons.BorderSizePixel = 0
TabButtons.Position = UDim2.new(0, 0, 0.274285704, 0)
TabButtons.Size = UDim2.new(0, 172, 0, 242)
TabButtons.CanvasSize = UDim2.new(0, 0, 0, 0)
TabButtons.ScrollBarThickness = 0

UIListLayout.Parent = TabButtons
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0.0199999996, 0)

Tabs.Name = "Tabs"
Tabs.Parent = Main
Tabs.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Tabs.BackgroundTransparency = 1.000
Tabs.BorderSizePixel = 0
Tabs.Position = UDim2.new(0.286666691, 0, 0, 0)
Tabs.Size = UDim2.new(0, 428, 0, 350)

local function KVVDN_fake_script() -- TabButtons.AutoResize 
	local script = Instance.new('LocalScript', TabButtons)

	
	while wait(0.01) do
		local Canvas = script.Parent
		local Constraint = script.Parent.UIListLayout
		Canvas.CanvasSize = UDim2.new(0, Constraint.AbsoluteContentSize.X, 0, Constraint.AbsoluteContentSize.Y)
	end
end
coroutine.wrap(KVVDN_fake_script)()

local tabs = {}

function tabs:CreateTab(name)

if name == "" or nil then return end

local TabButtonTemplate = Instance.new("TextButton")
local TabFrameTemplate = Instance.new("ScrollingFrame")
local UIListLayout_2 = Instance.new("UIListLayout")

TabButtonTemplate.Name = name
TabButtonTemplate.Parent = TabButtons
TabButtonTemplate.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
TabButtonTemplate.BorderSizePixel = 0
TabButtonTemplate.Position = UDim2.new(0.0872092992, 0, 0, 0)
TabButtonTemplate.Size = UDim2.new(0, 145, 0, 33)
TabButtonTemplate.Font = Enum.Font.SourceSans
TabButtonTemplate.Text = name
TabButtonTemplate.TextColor3 = Color3.fromRGB(255, 255, 255)
TabButtonTemplate.TextScaled = true
TabButtonTemplate.TextSize = 14.000
TabButtonTemplate.TextWrapped = true

TabFrameTemplate.Name = name
TabFrameTemplate.Parent = Tabs
TabFrameTemplate.Active = true
TabFrameTemplate.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TabFrameTemplate.BackgroundTransparency = 1.000
TabFrameTemplate.BorderSizePixel = 0
TabFrameTemplate.Position = UDim2.new(0, 0, 0.0314285718, 0)
TabFrameTemplate.Size = UDim2.new(0, 428, 0, 327)
TabFrameTemplate.Visible = false
TabFrameTemplate.CanvasSize = UDim2.new(0, 0, 0, 0)
TabFrameTemplate.ScrollBarThickness = 0

UIListLayout_2.Parent = TabFrameTemplate
UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_2.Padding = UDim.new(0.0199999996, 0)

local function MVRAW_fake_script() -- TabButtonTemplate.MouseClick 
	local script = Instance.new('LocalScript', TabButtonTemplate)

	local tabs = script.Parent.Parent.Parent.Parent.Tabs

	script.Parent.MouseButton1Click:Connect(function()
		if tabs:FindFirstChild(script.Parent.Name) then
			tabs:FindFirstChild(script.Parent.Name).Visible = true
			for a,e in pairs(tabs:GetChildren()) do
				if e.Name ~= script.Parent.Name then
					e.Visible = false
				end
			end
		end
	end)
end
coroutine.wrap(MVRAW_fake_script)()

local function SLEAJGJ_fake_script() -- TabFrameTemplate.AutoResize 
	local script = Instance.new('LocalScript', TabFrameTemplate)

	
	while wait(0.01) do
		local Canvas = script.Parent
		local Constraint = script.Parent.UIListLayout
		Canvas.CanvasSize = UDim2.new(0, Constraint.AbsoluteContentSize.X, 0, Constraint.AbsoluteContentSize.Y)
	end
end
coroutine.wrap(SLEAJGJ_fake_script)()

local objects = {}

function objects:CreateButton(name, callback)

if name == "" or nil then return end

local callback = callback or function() end

local ButtonTemplate = Instance.new("TextButton")

ButtonTemplate.Name = name
ButtonTemplate.Parent = TabFrameTemplate
ButtonTemplate.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
ButtonTemplate.BorderSizePixel = 0
ButtonTemplate.Position = UDim2.new(0.0186915882, 0, 0, 0)
ButtonTemplate.Size = UDim2.new(0, 412, 0, 31)
ButtonTemplate.Font = Enum.Font.SourceSans
ButtonTemplate.Text = name
ButtonTemplate.TextColor3 = Color3.fromRGB(255, 255, 255)
ButtonTemplate.TextScaled = true
ButtonTemplate.TextSize = 14.000
ButtonTemplate.TextWrapped = true

ButtonTemplate.MouseButton1Down:Connect(function()
	pcall(callback)
end)

end

function objects:CreateToggle(name, callback)

if name == "" or nil then return end

local callback = callback or function() end

local actions = {}
local enabled = false

local ToggleTemplate = Instance.new("TextButton")
local LittleBar = Instance.new("Frame")

ToggleTemplate.Name = name
ToggleTemplate.Parent = TabFrameTemplate
ToggleTemplate.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
ToggleTemplate.BorderSizePixel = 0
ToggleTemplate.Position = UDim2.new(0.0186915882, 0, 0, 0)
ToggleTemplate.Size = UDim2.new(0, 412, 0, 31)
ToggleTemplate.Font = Enum.Font.SourceSans
ToggleTemplate.Text = name
ToggleTemplate.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleTemplate.TextScaled = true
ToggleTemplate.TextSize = 14.000
ToggleTemplate.TextWrapped = true

LittleBar.Parent = ToggleTemplate
LittleBar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
LittleBar.BorderSizePixel = 0
LittleBar.Position = UDim2.new(0, 0, 1, 0)
LittleBar.Size = UDim2.new(0, 412, 0, 1)

ToggleTemplate.MouseButton1Down:Connect(function()
	if enabled == false then
		LittleBar.BackgroundColor3 = Color3.fromRGB(255,0,0)
	else
		LittleBar.BackgroundColor3 = Color3.fromRGB(0,255,0)
		enabled = not enabled
		pcall(callback, enabled)
	end
end)

end
return objects

end
return tabs

end
return lib
